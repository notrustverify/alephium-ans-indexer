"use strict";
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RewardTokenInstance = exports.RewardToken = void 0;
const web3_1 = require("@alephium/web3");
const RewardToken_ral_json_1 = __importDefault(require("../forward_name_resolver/RewardToken.ral.json"));
const contracts_1 = require("./contracts");
const types_1 = require("./types");
class Factory extends web3_1.ContractFactory {
    encodeFields(fields) {
        return (0, web3_1.encodeContractFields)((0, web3_1.addStdIdToFields)(this.contract, fields), this.contract.fieldsSig, types_1.AllStructs);
    }
    getInitialFieldsWithDefaultValues() {
        return this.contract.getInitialFieldsWithDefaultValues();
    }
    consts = {
        ErrorCodes: {
            OnlyParentAllowed: BigInt("0"),
            NFTNotFound: BigInt("1"),
            NFTNotPartOfCollection: BigInt("2"),
            OnlyNftOwnerAllowed: BigInt("3"),
            NameHasNotExpired: BigInt("4"),
            CannotRenewName: BigInt("5"),
            TokenAlreadyGenerated: BigInt("6"),
            ReverseAddressNotFound: BigInt("7"),
            OnlyNftOwnerOrHolderAllowed: BigInt("8"),
            IncorrectFarmInputAmount: BigInt("9"),
            CropHasNotExpired: BigInt("10"),
            FarmInputAmountNotConsumed: BigInt("11"),
            FarmAlreadyGenerated: BigInt("12"),
        },
        Keys: { Names: "01", Token: "02", Farm: "03" },
    };
    at(address) {
        return new RewardTokenInstance(address);
    }
    tests = {
        getSymbol: async (params) => {
            return (0, web3_1.testMethod)(this, "getSymbol", params, contracts_1.getContractByCodeHash);
        },
        getName: async (params) => {
            return (0, web3_1.testMethod)(this, "getName", params, contracts_1.getContractByCodeHash);
        },
        getDecimals: async (params) => {
            return (0, web3_1.testMethod)(this, "getDecimals", params, contracts_1.getContractByCodeHash);
        },
        getTotalSupply: async (params) => {
            return (0, web3_1.testMethod)(this, "getTotalSupply", params, contracts_1.getContractByCodeHash);
        },
        mintTokens: async (params) => {
            return (0, web3_1.testMethod)(this, "mintTokens", params, contracts_1.getContractByCodeHash);
        },
        burnTokens: async (params) => {
            return (0, web3_1.testMethod)(this, "burnTokens", params, contracts_1.getContractByCodeHash);
        },
    };
}
// Use this object to test and deploy the contract
exports.RewardToken = new Factory(web3_1.Contract.fromJson(RewardToken_ral_json_1.default, "", "77c9f625f0fbe2d9ba253e4b445b828fc44b74dc40bcd03e601cae6d81c0425f", types_1.AllStructs));
// Use this class to interact with the blockchain
class RewardTokenInstance extends web3_1.ContractInstance {
    constructor(address) {
        super(address);
    }
    async fetchState() {
        return (0, web3_1.fetchContractState)(exports.RewardToken, this);
    }
    view = {
        getSymbol: async (params) => {
            return (0, web3_1.callMethod)(exports.RewardToken, this, "getSymbol", params === undefined ? {} : params, contracts_1.getContractByCodeHash);
        },
        getName: async (params) => {
            return (0, web3_1.callMethod)(exports.RewardToken, this, "getName", params === undefined ? {} : params, contracts_1.getContractByCodeHash);
        },
        getDecimals: async (params) => {
            return (0, web3_1.callMethod)(exports.RewardToken, this, "getDecimals", params === undefined ? {} : params, contracts_1.getContractByCodeHash);
        },
        getTotalSupply: async (params) => {
            return (0, web3_1.callMethod)(exports.RewardToken, this, "getTotalSupply", params === undefined ? {} : params, contracts_1.getContractByCodeHash);
        },
        mintTokens: async (params) => {
            return (0, web3_1.callMethod)(exports.RewardToken, this, "mintTokens", params, contracts_1.getContractByCodeHash);
        },
        burnTokens: async (params) => {
            return (0, web3_1.callMethod)(exports.RewardToken, this, "burnTokens", params, contracts_1.getContractByCodeHash);
        },
    };
    transact = {
        getSymbol: async (params) => {
            return (0, web3_1.signExecuteMethod)(exports.RewardToken, this, "getSymbol", params);
        },
        getName: async (params) => {
            return (0, web3_1.signExecuteMethod)(exports.RewardToken, this, "getName", params);
        },
        getDecimals: async (params) => {
            return (0, web3_1.signExecuteMethod)(exports.RewardToken, this, "getDecimals", params);
        },
        getTotalSupply: async (params) => {
            return (0, web3_1.signExecuteMethod)(exports.RewardToken, this, "getTotalSupply", params);
        },
        mintTokens: async (params) => {
            return (0, web3_1.signExecuteMethod)(exports.RewardToken, this, "mintTokens", params);
        },
        burnTokens: async (params) => {
            return (0, web3_1.signExecuteMethod)(exports.RewardToken, this, "burnTokens", params);
        },
    };
    async multicall(calls) {
        return (await (0, web3_1.multicallMethods)(exports.RewardToken, this, calls, contracts_1.getContractByCodeHash));
    }
}
exports.RewardTokenInstance = RewardTokenInstance;
